import vk_api
import json
from vk_api.longpoll import VkLongPoll, VkEventType

import random

import parsing
from parsing import news_events

token = "f64dac7a2454d26a07f4a7081417fa6ba1ffd3cc4b3d13b83162f353c3dd780c752d5c342e3555e8790fe"

main_keyboard = {
    "one_time": False,
    "buttons": [
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"1\"}",
                "label": "–û –Ω–∞—Å üéØ"
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"2\"}",
                "label": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üçî"
            },
            "color": "positive"
        },
            {
                "action": {
                    "type": "text",
                    "payload": "{\"button\": \"3\"}",
                    "label": "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è üåè"
                },
                "color": "positive"
            }
        ],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"4\"}",
                "label": "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìô"
            },
            "color": "primary"
        }]
    ]
}

main_keyboard = json.dumps(main_keyboard, ensure_ascii=False).encode('utf-8')
main_keyboard = str(main_keyboard.decode('utf-8'))


about_us_keyboard = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"1\"}",
                "label": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"2\"}",
                "label": "–ß–µ–º –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è ?"
            },
            "color": "primary"
        },
        {
            "action": {
                "type": "text",
                "payload": "{\"button\": \"3\"}",
                "label": "–ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è ?",
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"4\"}",
                "label": "–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É ?",
            },
            "color": "primary"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"5\"}",
                "label": "–ö–æ–Ω—Ç–∞–∫—Ç—ã üìô",
            },
            "color": "secondary"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"6\"}",
                "label": "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –ø—Ä–æ–µ–∫—Ç–∞",
            },
            "color": "negative"
        }]
    ],
}

about_us_keyboard = json.dumps(about_us_keyboard, ensure_ascii=False).encode('utf-8')
about_us_keyboard = str(about_us_keyboard.decode('utf-8'))

events_keyboard = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"1\"}",
                "label": "–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            },
            "color": "negative"
        }],
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"2\"}",
                "label": "–ü—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"3\"}",
                "label": "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
            },
            "color": "primary"
        }],
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"4\"}",
                "label": "–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –ù–ì–¢–£"
            },
            "color": "secondary"
        }],
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"5\"}",
                "label": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ú–µ–∂–≤—É–∑–æ–≤—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"
            },
            "color": "positive"
        }]
    ],
}

events_keyboard = json.dumps(events_keyboard, ensure_ascii=False).encode('utf-8')
events_keyboard = str(events_keyboard.decode('utf-8'))

app_keyboard = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"1\"}",
                "label": "–£–∑–Ω–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è üïê"
            },
            "color": "primary"
        }],
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"2\"}",
                "label": "–ó–∞–π—Ç–∏ –≤ Google üìü",
                "link": "https://www.google.com/"
            }
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"3\"}",
                "label": "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É ‚õÖ"
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "callback",
                "payload": "{\"button\": \"4\"}",
                "label": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üí°"
            },
            "color": "negative"
        }]
    ]
}

app_keyboard = json.dumps(app_keyboard, ensure_ascii=False).encode('utf-8')
app_keyboard = str(app_keyboard.decode('utf-8'))

contacts_keyboard = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"1\"}",
                "label": "–ù–∏–∫–∏—Ç–µ",
                "link": "https://vk.com/nikyats"
            }
        },
            {
                "action": {
                    "type": "open_link",
                    "payload": "{\"button\": \"2\"}",
                    "label": "–ê–ª–µ–∫—Å–µ—é",
                    "link": "https://vk.com/alex_xs"
                }
            }],
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"3\"}",
                "label": "–ò–ª—å–µ",
                "link": "https://vk.com/ki1337ki"
            }
        }],
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"3\"}",
                "label": "–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                "link": "https://vk.com/setmyaddresspls"
            }
        }],

    ]
}

contacts_keyboard = json.dumps(contacts_keyboard, ensure_ascii=False).encode('utf-8')
contacts_keyboard = str(contacts_keyboard.decode('utf-8'))

go_answer = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"1\"}",
                "label": "–ù–∞–ø–∏—Å–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –ø—Ä–æ–µ–∫—Ç–∞",
                "link": "https://vk.com/id8970990"
            }
        }]
    ]
}

go_answer = json.dumps(go_answer, ensure_ascii=False).encode('utf-8')
go_answer = str(go_answer.decode('utf-8'))

in_team = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"1\"}",
                "label": "–ù–∞–ø–∏—Å–∞—Ç—å –ù–∏–∫–∏—Ç–µ",
                "link": "https://vk.com/nikyats"
            }
        }],
        [{
            "action": {
                "type": "open_link",
                "payload": "{\"button\": \"2\"}",
                "label": "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç 612",
                "link": "https://project-study.nstu.ru/project?id=612"
            }
        }]
    ]
}

in_team = json.dumps(in_team, ensure_ascii=False).encode('utf-8')
in_team = str(in_team.decode('utf-8'))

calc_keyboard = {
    "inline": True,
    "buttons": [
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"1\"}",
                "label": "–°–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–∞"
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"2\"}",
                "label": "–í—ã—á–µ—Å—Ç—å —á–∏—Å–ª–∞",
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"3\"}",
                "label": "–£–º–Ω–æ–∂–∏—Ç—å —á–∏—Å–ª–∞",
            },
            "color": "positive"
        }],
        [{
            "action": {
                "type": "text",
                "payload": "{\"button\": \"3\"}",
                "label": "–†–∞–∑–¥–µ–ª–∏—Ç—å —á–∏—Å–ª–∞",
            },
            "color": "positive"
        }]
    ]
}

calc_keyboard = json.dumps(calc_keyboard, ensure_ascii=False).encode('utf-8')
calc_keyboard = str(calc_keyboard.decode('utf-8'))


def write_msg(user_id, message, key):
    vk.method('messages.send',
              {'user_id': user_id,
               'message': message,
               'keyboard': key,
               'random_id': random.randint(0, 2048)})


vk = vk_api.VkApi(token=token)


longpoll = VkLongPoll(vk)


try:
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
                if event.text.lower() == "–æ –Ω–∞—Å üéØ":
                    write_msg(event.user_id, "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ", about_us_keyboard)
                elif event.text.lower() == "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üçî":
                    write_msg(event.user_id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?", events_keyboard)
                elif event.text.lower() == "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è üåè":
                    write_msg(event.user_id, "–ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –µ—Å—Ç—å –∑–¥–µ—Å—å!", app_keyboard)
                elif event.text.lower() == "–∫–æ–Ω—Ç–∞–∫—Ç—ã üìô":
                    write_msg(event.user_id, "–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—à—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫:", contacts_keyboard)
                elif event.text.lower() == "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –ø—Ä–æ–µ–∫—Ç–∞":
                    write_msg(event.user_id, news_events("news relative"), go_answer) #fergtergsergtertetertertertet
                elif event.text.lower() == "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üí°":
                    write_msg(event.user_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", calc_keyboard)
                # elif event.text == " ".join(re.findall('\d{2}', event.text)):
                #     write_msg(event.user_id, "–û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–¥–µ—Å—å", calc_keyboard)
                elif event.text.lower() == "–∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É ?":
                    write_msg(event.user_id, "–ù–∞–ø–∏—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ - –ù–∏–∫–∏—Ç–µ\n"
                                             "–∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,\n"
                                             "–Ω–∞–π–¥–∏ –ø—Ä–æ–µ–∫—Ç –Ω–æ–º–µ—Ä 612 –∏ –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É", in_team)
                else:
                    write_msg(event.user_id, event.text, main_keyboard)

except Exception as e:
    print(e)

